import React, { useEffect } from "react";
import './development-styles.css'

import { useAuth0 } from "@auth0/auth0-react";
import NavigationFooter from "./Components/NavigationFooter";
import { Tab, TabList, TabPanel, Tabs } from "react-tabs";
import { CopyBlock, vs2015 as theme } from "react-code-blocks";


import Collapsible from 'react-collapsible'



const DevloperMenuItemsComponent = (props) =>
{
    const { isLoading, isAuthenticated } = useAuth0();

    const [ swaggerOpen, setSwaggerOpen ] = React.useState(true);

    useEffect(() => {
        if (!isLoading && !isAuthenticated)
        {
            window.location.href = window.location.origin
        }
    })

    return (
        <div id="development">
            <link />
            <br />
            <center>
                <h1>Accessing menu items through API</h1>                
            </center>
            <br /><br />
            <div className="default-offset">
                <div>
                    <p>
                        The second major API access point is the <span className="endpoint">"/Public/GetMenuItems"</span> access point. This public access point can be used to retreive all items belonging to a specified user-menu. Different types of filtering and sorting can be applied to request to filter and sort the returned items. When retreiving items this way, the items categories will not be defined. If this is required, use the  <span className="endpoint">"/Public/GetMenu"</span> accesspoint.
                    </p>
                    <p> 
                        A menu-access token needs to be provided as URL parameter. This token can be aquired from a menu-owners Admin Panel on the "Edit menu" page. This token is of the Json Web Token (JWT) format and is unique per menu. They cannot be self-generated as these tokens are generated by the server and signed with private keys.
                    </p>
                    <p>
                        The endpoint returns a publicly accessible version of the filtered and sorted items with all sensitive information stripped. The exact content of the JSON response can be found on the Swagger portal.
                    </p>
                </div>
                <br /> <br />
                
                <div>
                    <h3 className="collapsible-trigger" onClick={() => setSwaggerOpen(!swaggerOpen)}>Swagger</h3>                    
                    <Collapsible
                        open={swaggerOpen} 
                        onOpen={() => setSwaggerOpen(true)}
                        onClose={() => setSwaggerOpen(false)}
                        triggerClassName="collapsible-trigger"
                        >
                        <center>
                            <iframe src="https://fhict-ordio.github.io/general/#/Public/get_Public_GetMenuItems" name="myiFrame" scrolling="yes" frameBorder="0" marginHeight="0px" marginWidth="0px" height="600px" width="100%" allowFullScreen />
                        </center>
                    </Collapsible>
                    {
                        !swaggerOpen &&
                    <span>...</span>
                    }
                </div>

                <br />
                <div>
                    <p>
                        This access point has a few special parameters and usages. First of all, both the "sort" and "filter" URL parameter are optional and not required. If not specified in the request "ALP_ASC" and "NONE" will be used as default sort and filter type. This means no filtering will be applied and the return will be sorted in alpabetically ascending order. If filter is not defined or "NONE" is used, neither filterParam1 nor filterParam2 need to be specified as these values arent used.
                    </p>

                    <br />
                    <div>
                        <h4>Sort Types</h4>
                        <p>
                            The access point offers a few different kinds of sorting. These are the following:
                            <br /><br />
                            <dl>
                                <dt>ALP_ASC (default value)</dt>
                                <dd>The ALP_ASC sort type will return the resulting items in an alpabetically ascending order.</dd>
                            </dl>
                            <dl>
                                <dt>ALP_DES</dt>
                                <dd>The ALP_DES sort type will return the resulting items in an alpabetically descending order.</dd>
                            </dl>
                            <dl>
                                <dt>PRICE_ASC</dt>
                                <dd>The PRICE_ASC sort type will return the resulting items in a price-ascending order.</dd>
                            </dl>
                            <dl>
                                <dt>PRICE_ASC</dt>
                                <dd>The PRICE_DES sort type will return the resulting items in a price-descending order.</dd>
                            </dl>
                        </p>
                    </div>

                    <br /><br />
                    <div>
                        <h4>Filter Types</h4>
                        <p>
                            The access point offers a few different kinds of filtering. These are the following:
                            <br /><br />
                            <dl>
                                <dt>NONE (default value)</dt>
                                <dd>The NONE filter type will return the resulting items without applying any filtering. If this filtering method is applied "filterParam1" and "filterParam2" do not need to be defined.</dd>
                            </dl>
                            <dl>
                                <dt>NAME</dt>
                                <dd>The NAME filter type will return the resulting items with a name filter applied. This means only items which name contains the given string will be returned. If this filtering method is applied, a string to filter on should be passed into "filterParam1". "filterParam2" does not need to be defined.</dd>
                            </dl>
                            <dl>
                                <dt>NAME_REGEX</dt>
                                <dd>The NAME_REGEX filter type will return the resulting items with a regex filter applied. This means a regular expression can be provided by the user which will be matched against the item names. Only mathing items are returned. If this filtering method is applied a regular expression string should be passed into "filterParam1". "filterParam2" does not need to be defined.</dd>
                            </dl>
                            <dl>
                                <dt>PRICE_RANGE</dt>
                                <dd>The PRICE_RANGE filter type will return the resulting items with a price filter applied. This means only items which price matches the price filter will be returned. If this filtering method is applied, a lower bound should be passed into "filterParam1" and/or an upper bound should be passed into "filterParam2". Either can be left out to remove a lower or upper bound.</dd>
                            </dl>
                            <dl>
                                <dt>TAG</dt>
                                <dd>The TAG filter type will return the resulting items with a tag filter applied. This means only items that have a matching tag in their tag-list will be returned. This is case sensitive! If this filtering method is applied, a tag to filter on should be passed into "filterParam1". "filterParam2" does not need to be defined.</dd>
                            </dl>
                        </p>
                    </div>
                </div>
                
                <br /><br />
                <div>
                    <h3>Code snippets</h3>
                    <br />
                    
                    <div>
                        <Tabs>
                            <TabList>
                                <Tab>JavaScript</Tab>
                                <Tab>C#</Tab>
                            </TabList>
                                
                            <TabPanel id="js">
                                <CopyBlock 
                                    text= {"export const GetMenuItems = async (token, sortType, filterType, filterParam1, filterParam2) =>\n{\n    let res = await\n        fetch(\"https://robinvanhoof.tech:1000/Public/GetMenuItems?token=\" + token + \"&sort=\" + sortType ?? \"ALP_ASC\" + \"&filter=\" + filterType ?? \"NONE\" + \"&filterParam1=\" + filterParam1 + \"&filterParam2=\" + filterParam2, {\n            method: \"GET\",\n            headers: { \"Content-Type\": \"application/json\", \"Access-Control-Allow-Origin\": '*' }\n        });\n    return ((res.status === 200) ? res.json() : res);\n}"}
                                    language={"js"}
                                    showLineNumbers={true}
                                    theme={theme}
                                    codeBlock
                                />
                            </TabPanel>
                            <TabPanel id="csharp">
                                <Tabs>
                                    <TabList>
                                        <Tab>Without enum</Tab>
                                        <Tab>With enum</Tab>
                                    </TabList>

                                    <TabPanel id="no-enum">
                                        <CopyBlock 
                                            text={"using System.Net.Http.Headers;\n\npublic static HttpResponseMessage GetMenuItems(string token, string sortType = \"ALP_ASC\", string filterType = \"NONE\", object? filterParam1 = null, object? filterParam2 = null)\n{\n    using (var client = new HttpClient())\n    {\n        client.BaseAddress = new Uri(\"https://robinvanhoof.tech:1000\");\n        client.DefaultRequestHeaders.Accept.Clear();\n        client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));\n        client.DefaultRequestHeaders.Add(\"Access-Control-Allow-Origin\", \"*\");\n\n        try {\n            return await client.GetAsync(\"/Public/GetMenu?token=\" + token + \"&sort=\" + sortType + \"&filter=\" + filterType + \"&filterParam1=\" + filterParam1.toString() + \"&filterParam2=\" + filterParam2.toString());\n        } catch (Exception ex)\n        {\n            Console.WriteLine(ex);\n            return null;\n        }\n    }\n}"}
                                            language={"cpp"}
                                            showLineNumbers={true}
                                            theme={theme}
                                            codeBlock
                                        />
                                    </TabPanel>

                                    <TabPanel id="enum">
                                        <CopyBlock 
                                            text={"using System.Net.Http.Headers;\n\npublic static HttpResponseMessage GetMenuItems(string token, SortType sortType = SortType.ALP_ASC, FilterType filterType = FilterType.NONE, object? filterParam1 = null, object? filterParam2 = null)\n{\n    using (var client = new HttpClient())\n    {\n        client.BaseAddress = new Uri(\"https://robinvanhoof.tech:1000\");\n        client.DefaultRequestHeaders.Accept.Clear();\n        client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));\n        client.DefaultRequestHeaders.Add(\"Access-Control-Allow-Origin\", \"*\");\n\n        try {\n            return await client.GetAsync(\"/Public/GetMenu?token=\" + token + \"&sort=\" + sortType.toString() + \"&filter=\" + filterType.toString() + \"&filterParam1=\" + filterParam1.toString() + \"&filterParam2=\" + filterParam2.toString());\n        } catch (Exception ex)\n        {\n            Console.WriteLine(ex);\n            return null;\n        }\n    }\n}\n\npublic enum SortType\n{\n    ALP_ASC,\n    ALP_DES,\n    PRICE_ASC,\n    PRICE_DES\n}\n\npublic enum FilterType\n{\n    NONE,\n    NAME,\n    NAME_REGEX,\n    PRICE_RANGE,\n    TAG\n}"}
                                            language={"cpp"}
                                            showLineNumbers={true}
                                            theme={theme}
                                            codeBlock
                                        />
                                    </TabPanel>
                                </Tabs>                    
                            </TabPanel>
                        </Tabs>
                    </div>
                </div>
            </div>

            <NavigationFooter prevLink={"/development/accessing-menus"} prevText={"Accessing menus"} />
        </div>
    );
}

export default DevloperMenuItemsComponent;